// prisma/schema.prisma

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  projects      Project[]
  chatMetadata  ChatMetadata[]
}

model Project {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  central_context_bank    String?
  user_persona            Json?
  current_phase           String  @default("identifyANeed")
  name        String    
  userId      String    @db.ObjectId
  user        User      @relation(fields: [userId] , references: [id] , onDelete : Cascade)
  chatMetadata  ChatMetadata[]
  chats         Chats[]
}

model Account {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  userId            String   @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.String
  access_token      String?  @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.String
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}


model ChatMetadata {
  id             String  @id @default(auto()) @map("_id") @db.ObjectId
  projectId      String  @db.ObjectId 
  userId         String  @db.ObjectId 
  chatId         String  @db.ObjectId @unique
  chatName       String
  completed      Boolean?
  createdAt      DateTime? @default(now())
  includeProjectHistory Boolean? @default(false)

  user           User    @relation(fields : [userId] , references : [id] , onDelete : Cascade)
  chat           Chats   @relation(fields : [chatId] , references : [id] , onDelete : Cascade)
  project        Project  @relation(fields: [projectId] , references: [id] , onDelete : Cascade)     
}

model Chats {
  id             String  @id @default(auto()) @map("_id") @db.ObjectId
  messages       Json[]
  summary        String?
  projectId      String?  @db.ObjectId

  project        Project?  @relation(fields: [projectId] , references: [id] , onDelete : Cascade) 

  chatMetadata   ChatMetadata[]
}
